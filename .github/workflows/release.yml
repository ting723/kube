name: Build and Release Rust CLI Tool

on:
  push:
    tags:
      - 'v*'  # 当推送类似v1.0.0的标签时触发

permissions:
  contents: write

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact_name: kube-tui  # 基础文件名
            asset_name: kube-tui-linux-x86_64  # 带平台标识的唯一名称
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: kube-tui
            asset_name: kube-tui-macos-aarch64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: kube-tui.exe
            asset_name: kube-tui-windows-x86_64.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          target: ${{ matrix.target }}

      - name: Install musl tools (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y musl-tools

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Strip binary (non-Windows)
        if: matrix.os != 'windows-latest'
        run: |
          case ${{ matrix.target }} in
            x86_64-unknown-linux-musl)
              strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
              ;;
            aarch64-apple-darwin)
              strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
              ;;
          esac

      - name: Prepare artifacts (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path artifacts -Force | Out-Null
          # 重命名文件为带平台标识的名称
          Copy-Item "target/${{ matrix.target }}/release/${{ matrix.artifact_name }}" -Destination "artifacts/${{ matrix.asset_name }}"
          if (-Not (Test-Path "artifacts/${{ matrix.asset_name }}")) {
            Write-Error "构建产物不存在: artifacts/${{ matrix.asset_name }}"
            exit 1
          }

      - name: Prepare artifacts (Unix)
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          mkdir -p artifacts
          # 重命名文件为带平台标识的名称
          cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} "artifacts/${{ matrix.asset_name }}"
          if [ ! -f "artifacts/${{ matrix.asset_name }}" ]; then
            echo "构建产物不存在: artifacts/${{ matrix.asset_name }}"
            exit 1
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: artifacts/${{ matrix.asset_name }}
          if-no-files-found: error

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: false

      - name: List downloaded artifacts
        run: |
          echo "下载的文件结构:"
          tree artifacts/

      - name: Install GitHub CLI
        run: |
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh -y
          gh --version

      - name: Create release and upload assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # 创建release
          gh release create ${{ github.ref_name }} \
            --title "Release ${{ github.ref_name }}" \
            --notes "Automatically generated release for ${{ github.ref_name }}" \
            --draft=false \
            --prerelease=false
          
          # 上传所有资产 - 现在每个文件都有唯一名称
          find artifacts -type f | while read -r file; do
            echo "上传资产: $file"
            # 上传时使用带平台标识的文件名
            gh release upload ${{ github.ref_name }} "$file"
          done
